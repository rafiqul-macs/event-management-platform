AWSTemplateFormatVersion: '2010-09-09'
Description: 'Event Management Platform - Lambda Functions'

Parameters:
  Environment:
    Description: Deployment environment
    Type: String
    Default: dev
  EventsTableName:
    Description: DynamoDB table for events
    Type: String
  UsersTableName:
    Description: DynamoDB table for users
    Type: String
  RegistrationsTableName:
    Description: DynamoDB table for registrations
    Type: String
  EventBusName:
    Description: EventBridge event bus name
    Type: String
  AssetsBucketName:
    Description: S3 bucket for assets
    Type: String

Resources:
  # Event Service Lambda
  EventServiceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'event-service-${Environment}'
      Handler: index.handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Event Service received event:', JSON.stringify(event));
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
              },
              body: JSON.stringify({ message: 'Event Service called' })
            };
          };
      Runtime: nodejs16.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          EVENTS_TABLE: !Ref EventsTableName
          REGISTRATIONS_TABLE: !Ref RegistrationsTableName
          ASSETS_BUCKET: !Ref AssetsBucketName
          ENVIRONMENT: !Ref Environment
          EVENT_BUS_NAME: !Ref EventBusName

  # User Service Lambda
  UserServiceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'user-service-${Environment}'
      Handler: index.handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('User Service received event:', JSON.stringify(event));
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
              },
              body: JSON.stringify({ message: 'User Service called' })
            };
          };
      Runtime: nodejs16.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTableName
          REGISTRATIONS_TABLE: !Ref RegistrationsTableName
          ENVIRONMENT: !Ref Environment
          EVENT_BUS_NAME: !Ref EventBusName

  # Notification Service Lambda
  NotificationServiceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'notification-service-${Environment}'
      Handler: index.handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Notification received:', JSON.stringify(event));
            return { 
              statusCode: 200,
              body: JSON.stringify({ message: 'Notification processed' })
            };
          };
      Runtime: nodejs16.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTableName
          EVENTS_TABLE: !Ref EventsTableName
          ENVIRONMENT: !Ref Environment

Outputs:
  EventServiceFunctionName:
    Description: Name of the Event Service Lambda Function
    Value: !Ref EventServiceFunction
  EventServiceFunctionArn:
    Description: ARN of the Event Service Lambda Function
    Value: !GetAtt EventServiceFunction.Arn
  UserServiceFunctionName:
    Description: Name of the User Service Lambda Function
    Value: !Ref UserServiceFunction
  UserServiceFunctionArn:
    Description: ARN of the User Service Lambda Function
    Value: !GetAtt UserServiceFunction.Arn
  NotificationServiceFunctionName:
    Description: Name of the Notification Service Lambda Function
    Value: !Ref NotificationServiceFunction
  NotificationServiceFunctionArn:
    Description: ARN of the Notification Service Lambda Function
    Value: !GetAtt NotificationServiceFunction.Arn